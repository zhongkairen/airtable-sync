name: Run Airtable Sync

on:
  schedule:
    - cron: "0 6-14 * * 1-5" # Local time (UTC+3) 9-17 hours weekdays
    - cron: "0 21 * * 1-5" # Midnight local time (UTC+3)
  workflow_dispatch: # Enables manual trigger
  push:
    branches:
      - feature/* # Run only on feature branches

jobs:
  run-python:
    permissions: write-all
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Download latest wheel file
        id: download_wheel
        run: |
          echo "pwd=`pwd`"
          wheel_file_url=$(curl -s https://api.github.com/repos/zhongkairen/airtable-sync/releases/latest | jq -r '.assets[] | select(.name | test("airtable_sync-.*\\.whl")) | .browser_download_url')
          wheel_file_name=$(basename $wheel_file_url)
          curl -L -o $wheel_file_name $wheel_file_url || { echo "Failed to download wheel file"; exit 1; }
          echo "airtable_sync_wheel_file_name=$wheel_file_name" >> $GITHUB_ENV

      - name: Cache wheel file
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.airtable_sync_wheel_file_name }}
          key: ${{ runner.os }}-wheel-${{ hashFiles('**/airtable_sync-*.whl') }}

      - name: Install package
        if: ${{ success() }}
        run: |
          wheel_file_name=${{ env.airtable_sync_wheel_file_name }}
          echo "pwd=`pwd`" }}
          echo "pwd=`pwd`"
          ls -lh $wheel_file_name
          ls -lah
          # python -m pip install --upgrade pip
          pip install $wheel_file_name

      - name: Create config file
        if: ${{ success() }}
        run: |
          echo '{
              "airtable": {
                  "baseId": "appM1P3VYxuftmwub",
                  "tableId": "tblFxnqURZZEiTMkc",
                  "viewName": "uAds Ad Request"
              },
              "github": {
                  "owner": "Unity-Technologies",
                  "repo": "mz-ad-request-team",
                  "project": "Ad Request",
                  "fieldMap": {
                      "Start Date": "Engineering Start Date",
                      "Delivery Date": "Engineering Delivery Date"
                  }
              }
          }' > $GITHUB_WORKSPACE/config.json

      - name: Run Airtable Sync
        id: run-airtable-sync
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.AIRSYNC_GITHUB_TOKEN }}
          AIRTABLE_TOKEN: ${{ secrets.AIRSYNC_AIRTABLE_TOKEN }}
        run: |
          python --version
          which python

          ls -lh ./config.json

          cat ./config.json
          
          DIR=$(dirname $(which python3))
          echo $PATH | grep -q "$DIR" && echo "In PATH" || echo "$DIR not in PATH"

          pwd
          airtable-sync -v

      - name: Update status
        if: always() # Ensures this runs even if previous steps fail
        env:
          GITHUB_TOKEN: ${{ secrets.AIRSYNC_GITHUB_TOKEN }}
        run: |
          echo "previous step result: ${{ steps.run-airtable-sync.outcome }}"
          STATUS="failed"
          if [[ ${{ steps.run-airtable-sync.outcome }} == "success" ]]; then
            STATUS="synced"
          fi
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          curl -X POST \
            -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{
              "event_type": "sync_status_update",
              "client_payload": {
                "status": "'"${STATUS}"'",
                "timestamp": "'"${TIMESTAMP}"'"
              }
            }'

