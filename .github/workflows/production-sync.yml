name: Production sync
# Regularly sync using the latest released package and will trigger status badge update
on:
  schedule:
    - cron: "0 6-14 * * 1-5" # Local time (UTC+3) 9-17 hours weekdays
    - cron: "0 21 * * 1-5" # Midnight local time (UTC+3)
  workflow_dispatch: # Enables manual trigger

jobs:
  run-python:
    permissions: write-all
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Download latest wheel file
        id: download_wheel
        run: |
          echo "pwd=`pwd`"
          # Construct the GitHub API URL directly with the built-in variable
          releases_api_url="https://api.github.com/repos/${{ github.repository }}/releases/latest"

          wheel_file_url=$(curl -s $releases_api_url | jq -r '.assets[] | select(.name | test("airtable_sync-.*\\.whl")) | .browser_download_url')
          wheel_file_name=$(basename $wheel_file_url)
          curl -L -o $wheel_file_name $wheel_file_url || { echo "Failed to download wheel file"; exit 1; }
          echo "airtable_sync_wheel_file_name=$wheel_file_name" >> $GITHUB_ENV

      - name: Cache wheel file
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.airtable_sync_wheel_file_name }}
          key: ${{ runner.os }}-wheel-${{ hashFiles('**/airtable_sync-*.whl') }}

      - name: Install package
        if: ${{ success() }}
        run: |
          wheel_file_name=${{ env.airtable_sync_wheel_file_name }}
          echo "pwd=`pwd`" }}
          echo "pwd=`pwd`"
          ls -lh $wheel_file_name
          ls -lah
          # python -m pip install --upgrade pip
          pip install $wheel_file_name

      - name: Copy config file
        run: |
          cp .github/workflows/production-config.json $GITHUB_WORKSPACE/config.json


      - name: Run Airtable sync
        id: run-airtable-sync
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.AIRSYNC_GITHUB_TOKEN }}
          AIRTABLE_TOKEN: ${{ secrets.AIRSYNC_AIRTABLE_TOKEN }}
        run: |
          python --version
          which python

          ls -lh ./config.json

          cat ./config.json

          DIR=$(dirname $(which python3))
          echo $PATH | grep -q "$DIR" && echo "In PATH" || echo "$DIR not in PATH"

          pwd
          airtable-sync -v

      - name: Update status
        if: always() # Ensures this runs even if previous steps fail
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.run-airtable-sync.outcome }}' === 'success' ? 'synced' : 'failed';
            const timestamp = new Date().toISOString();

            const response = await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'sync_status_update',
              client_payload: {
                status: status,
                timestamp: timestamp,
              },
            });

            console.log(`Status updated: \n${JSON.stringify(response, null, 2)}`);
