name: Update sync status

on:
  repository_dispatch:
    types: [sync_status_update]

jobs:
  process-status:
    runs-on: ubuntu-latest
    env:
      STATUS_BRANCH: "status"
      STATUS_FILE: "sync-status.json"
      STATUS_COMMIT_MESSAGE: "[GitHub Actions Bot] Sync status update"  # Automatic status update commit message

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Process Status
        uses: actions/github-script@v7
        with:
          script: |
            const status = context.payload.client_payload.status;
            const timestamp = new Date(context.payload.client_payload.timestamp);
            const timeText = timestamp.toISOString().split('.')[0]+"Z";

            console.log(`Status: ${status}`);
            console.log(`Timestamp: ${timeText}`);

            const statusJson = {
              schemaVersion: 1,
              label: "last sync",
              message: `${status} ${timeText}`,
              color: status === "synced" ? "green" : "red"
            };

            const fileName = 'status.json';
            const fs = require('fs');
            fs.writeFileSync(fileName, JSON.stringify(statusJson, null, 2));

      - name: Check out status branch
        id: checkout_status_branch
        if: always() # Ensures this runs even if previous steps fail
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check out the status branch
          git fetch origin ${{ env.STATUS_BRANCH }}
          git checkout ${{ env.STATUS_BRANCH }}

          last_commit_message=$(git log -1 --pretty=%B)
          if [[ "$last_commit_message" != "${STATUS_COMMIT_MESSAGE}" ]]; then
            echo "Last commit message is not '${STATUS_COMMIT_MESSAGE}'. Skipping commit."
          else
            cp status.json ${{ env.STATUS_FILE }}
            git add ${{ env.STATUS_FILE }}
            git commit --amend -m "${STATUS_COMMIT_MESSAGE}"
            git push --force origin ${{ env.STATUS_BRANCH }}
          fi

      - name: Refresh the badge
        uses: actions/github-script@v7
        with:
          script: |
            const shieldsIoPrefix = "https://img.shields.io/endpoint?url=";
            const jsonUrl = `https://raw.githubusercontent.com/${{ github.repository }}/status/${{ env.STATUS_FILE }}`;

            const noCache = Date.now();  // Generate a unique timestamp as a cache-buster
            const url = `${shieldsIoPrefix}${encodeURIComponent(jsonUrl)}?no_cache=${noCache}`;

            // Use fetch to make the request
            const response = await fetch(url, {
              method: 'GET',
              headers: {
                'Accept': 'application/json',
              },
            });

            if (!response.ok) {
              console.error(`Failed to fetch badge: ${response.statusText}`);
            } else {
              console.log(`Badge reloaded successfully: ${await response.text()}`);
            }
